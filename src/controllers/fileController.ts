/**
 * Dialox Api ImamLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, FileWrapper, RequestOptions } from '../core';
import { string } from '../schema';
import { BaseController } from './baseController';

export class FileController extends BaseController {
  /**
   * @param workspaceId
   * @param file
   * @return Response from the API call
   */
  async createFile(
    workspaceId: string,
    file: FileWrapper,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({ workspaceId: [workspaceId, string()] });
    req.formData({
      file: file,
    });
    req.appendTemplatePath`/workspaces/${mapped.workspaceId}/file`;
    return req.call(requestOptions);
  }

  /**
   * @param workspaceId
   * @param file
   * @return Response from the API call
   */
  async uploadFileMeta(
    workspaceId: string,
    file: FileWrapper,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({ workspaceId: [workspaceId, string()] });
    req.formData({
      file: file,
    });
    req.appendTemplatePath`/workspaces/${mapped.workspaceId}/file/whatsapp`;
    return req.call(requestOptions);
  }

  /**
   * @param workspaceId
   * @param channelid
   * @param file
   * @return Response from the API call
   */
  async reusable(
    workspaceId: string,
    channelid: string,
    file: FileWrapper,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      workspaceId: [workspaceId, string()],
      channelid: [channelid, string()],
    });
    req.formData({
      file: file,
    });
    req.appendTemplatePath`/workspaces/${mapped.workspaceId}/file/fb/${mapped.channelid}/channel`;
    return req.call(requestOptions);
  }
}
