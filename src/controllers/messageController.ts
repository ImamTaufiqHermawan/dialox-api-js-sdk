/**
 * Dialox Api ImamLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  CreateMessageRequest,
  createMessageRequestSchema,
} from '../models/createMessageRequest';
import { number, string } from '../schema';
import { BaseController } from './baseController';

export class MessageController extends BaseController {
  /**
   * @param workspaceId
   * @param conversationId
   * @param body
   * @return Response from the API call
   */
  async createMessage(
    workspaceId: string,
    conversationId: string,
    body: CreateMessageRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      workspaceId: [workspaceId, string()],
      conversationId: [conversationId, string()],
      body: [body, createMessageRequestSchema],
    });
    req.json(mapped.body);
    req.appendTemplatePath`/workspaces/${mapped.workspaceId}/conversations/${mapped.conversationId}/messages`;
    return req.call(requestOptions);
  }

  /**
   * @param take
   * @param page
   * @param workspaceId
   * @param conversationId
   * @return Response from the API call
   */
  async lIstMessages(
    take: number,
    page: number,
    workspaceId: string,
    conversationId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      take: [take, number()],
      page: [page, number()],
      workspaceId: [workspaceId, string()],
      conversationId: [conversationId, string()],
    });
    req.query('take', mapped.take);
    req.query('page', mapped.page);
    req.appendTemplatePath`/workspaces/${mapped.workspaceId}/conversations/${mapped.conversationId}/messages`;
    return req.call(requestOptions);
  }
}
