/**
 * Dialox Api ImamLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  CreateGroupRequest,
  createGroupRequestSchema,
} from '../models/createGroupRequest';
import {
  UpdateContactRequest1,
  updateContactRequest1Schema,
} from '../models/updateContactRequest1';
import { string } from '../schema';
import { BaseController } from './baseController';

export class GroupsController extends BaseController {
  /**
   * @param workspaceid
   * @return Response from the API call
   */
  async listGroup(
    workspaceid: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({ workspaceid: [workspaceid, string()] });
    req.appendTemplatePath`/workspaces/${mapped.workspaceid}/groups`;
    return req.call(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async detailGroup(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'GET',
      '/workspaces/workspace-1/groups/49331eb4-d711-46a3-a3da-f2d00e65d704'
    );
    req.baseUrl('Server 1');
    return req.call(requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async createGroup(
    body: CreateGroupRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'POST',
      '/workspaces/chitchat-6OHiX6r4_/groups'
    );
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({ body: [body, createGroupRequestSchema] });
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async updateContact(
    body: UpdateContactRequest1,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'PATCH',
      '/workspaces/workspace-1/groups/78a2bc66-bce1-4760-80e1-f4017de390e6'
    );
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      body: [body, updateContactRequest1Schema],
    });
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async deleteContact(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'DELETE',
      '/workspaces/workspace-1/groups/78a2bc66-bce1-4760-80e1-f4017de390e6'
    );
    req.baseUrl('Server 1');
    return req.call(requestOptions);
  }
}
