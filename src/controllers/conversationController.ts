/**
 * Dialox Api ImamLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  AssignAgentConversationRequest,
  assignAgentConversationRequestSchema,
} from '../models/assignAgentConversationRequest';
import {
  ChangeStatusConversationRequest,
  changeStatusConversationRequestSchema,
} from '../models/changeStatusConversationRequest';
import {
  ChangeStatusReplyGPTRequest,
  changeStatusReplyGPTRequestSchema,
} from '../models/changeStatusReplyGPTRequest';
import { bigint, number, string } from '../schema';
import { BaseController } from './baseController';

export class ConversationController extends BaseController {
  /**
   * @param take
   * @param page
   * @param workspaceId
   * @return Response from the API call
   */
  async listConversation(
    take: number,
    page: number,
    workspaceId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      take: [take, number()],
      page: [page, number()],
      workspaceId: [workspaceId, string()],
    });
    req.query('take', mapped.take);
    req.query('page', mapped.page);
    req.appendTemplatePath`/workspaces/${mapped.workspaceId}/conversations`;
    return req.call(requestOptions);
  }

  /**
   * @param workspaceId
   * @param conversationId
   * @return Response from the API call
   */
  async detailConversation(
    workspaceId: string,
    conversationId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      workspaceId: [workspaceId, string()],
      conversationId: [conversationId, string()],
    });
    req.appendTemplatePath`/workspaces/${mapped.workspaceId}/conversations/${mapped.conversationId}`;
    return req.call(requestOptions);
  }

  /**
   * @param workspaceId
   * @param body
   * @return Response from the API call
   */
  async changeStatusConversation(
    workspaceId: string,
    body: ChangeStatusConversationRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      workspaceId: [workspaceId, string()],
      body: [body, changeStatusConversationRequestSchema],
    });
    req.json(mapped.body);
    req.appendTemplatePath`/workspaces/${mapped.workspaceId}/conversations/a1137aec-f48c-46e9-8aa8-7a67e927ff70`;
    return req.call(requestOptions);
  }

  /**
   * @param workspaceId
   * @param conversationId
   * @param body
   * @return Response from the API call
   */
  async changeStatusReplyGPT(
    workspaceId: string,
    conversationId: string,
    body: ChangeStatusReplyGPTRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      workspaceId: [workspaceId, string()],
      conversationId: [conversationId, string()],
      body: [body, changeStatusReplyGPTRequestSchema],
    });
    req.json(mapped.body);
    req.appendTemplatePath`/workspaces/${mapped.workspaceId}/conversations/${mapped.conversationId}/gpt`;
    return req.call(requestOptions);
  }

  /**
   * @param workspaceId
   * @param phonenumber
   * @return Response from the API call
   */
  async getConversationByPhoneNumber(
    workspaceId: string,
    phonenumber: bigint,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      workspaceId: [workspaceId, string()],
      phonenumber: [phonenumber, bigint()],
    });
    req.appendTemplatePath`/workspaces/${mapped.workspaceId}/conversations/by_phone/${mapped.phonenumber}`;
    return req.call(requestOptions);
  }

  /**
   * @param workspaceId
   * @param conversationId
   * @return Response from the API call
   */
  async downloadConversation(
    workspaceId: string,
    conversationId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      workspaceId: [workspaceId, string()],
      conversationId: [conversationId, string()],
    });
    req.appendTemplatePath`/workspaces/${mapped.workspaceId}/conversations/${mapped.conversationId}/download`;
    return req.call(requestOptions);
  }

  /**
   * @param workspaceId
   * @param conversationId
   * @param body
   * @return Response from the API call
   */
  async assignAgentConversation(
    workspaceId: string,
    conversationId: string,
    body: AssignAgentConversationRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      workspaceId: [workspaceId, string()],
      conversationId: [conversationId, string()],
      body: [body, assignAgentConversationRequestSchema],
    });
    req.json(mapped.body);
    req.appendTemplatePath`/workspaces/${mapped.workspaceId}/conversations/${mapped.conversationId}/assign-agent`;
    return req.call(requestOptions);
  }
}
