/**
 * Dialox Api ImamLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  CreateContactRequest,
  createContactRequestSchema,
} from '../models/createContactRequest';
import {
  UpdateContactRequest,
  updateContactRequestSchema,
} from '../models/updateContactRequest';
import { string, unknown } from '../schema';
import { BaseController } from './baseController';

export class ContactsController extends BaseController {
  /**
   * @param workspaceid
   * @return Response from the API call
   */
  async listContact(
    workspaceid: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({ workspaceid: [workspaceid, string()] });
    req.appendTemplatePath`/workspaces/${mapped.workspaceid}/contacts`;
    return req.call(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async detailContact(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'GET',
      '/workspaces/workspace-1/contacts/da1139d1-85c1-4fd3-8d10-f5376698a9ec'
    );
    req.baseUrl('Server 1');
    return req.call(requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async createContact(
    body: CreateContactRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/workspaces/workspace-1/contacts');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      body: [body, createContactRequestSchema],
    });
    req.json(mapped.body);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async updateContact(
    body: UpdateContactRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'PATCH',
      '/workspaces/workspace-1/contacts/76b2323f-b6bc-44cf-a1c2-9bd5d16cca2f'
    );
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      body: [body, updateContactRequestSchema],
    });
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param workspaceId
   * @param contactId
   * @return Response from the API call
   */
  async deleteContact(
    workspaceId: string,
    contactId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      workspaceId: [workspaceId, string()],
      contactId: [contactId, string()],
    });
    req.appendTemplatePath`/workspaces/${mapped.workspaceId}/contacts/${mapped.contactId}`;
    return req.call(requestOptions);
  }
}
