/**
 * Dialox Api ImamLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  CreateWorkspaceRequest,
  createWorkspaceRequestSchema,
} from '../models/createWorkspaceRequest';
import {
  UpdateWorkspaceByIdRequest,
  updateWorkspaceByIdRequestSchema,
} from '../models/updateWorkspaceByIdRequest';
import { string } from '../schema';
import { BaseController } from './baseController';

export class WorkspaceController extends BaseController {
  /**
   * @param body
   * @return Response from the API call
   */
  async createWorkspace(
    body: CreateWorkspaceRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/workspaces');
    req.baseUrl('Server 2');
    const mapped = req.prepareArgs({
      body: [body, createWorkspaceRequestSchema],
    });
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param workspaceId
   * @param body
   * @return Response from the API call
   */
  async updateWorkspaceById(
    workspaceId: string,
    body: UpdateWorkspaceByIdRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PUT');
    req.baseUrl('Server 3');
    const mapped = req.prepareArgs({
      workspaceId: [workspaceId, string()],
      body: [body, updateWorkspaceByIdRequestSchema],
    });
    req.json(mapped.body);
    req.appendTemplatePath`/workspaces/${mapped.workspaceId}`;
    return req.call(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async getAllWorkspaces(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/workspaces');
    req.baseUrl('Server 3');
    return req.call(requestOptions);
  }

  /**
   * @param workspaceId
   * @return Response from the API call
   */
  async getWorkspaceById(
    workspaceId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    req.baseUrl('Server 3');
    const mapped = req.prepareArgs({ workspaceId: [workspaceId, string()] });
    req.appendTemplatePath`/workspaces/${mapped.workspaceId}`;
    return req.call(requestOptions);
  }

  /**
   * @param workspaceName
   * @return Response from the API call
   */
  async getWorkspaceByName(
    workspaceName: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    req.baseUrl('Server 3');
    const mapped = req.prepareArgs({
      workspaceName: [workspaceName, string()],
    });
    req.appendTemplatePath`/workspaces/name/${mapped.workspaceName}`;
    return req.call(requestOptions);
  }

  /**
   * @param workspaceId
   * @return Response from the API call
   */
  async deleteWorkspaceById(
    workspaceId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    req.baseUrl('Server 3');
    const mapped = req.prepareArgs({ workspaceId: [workspaceId, string()] });
    req.appendTemplatePath`/workspaces/${mapped.workspaceId}`;
    return req.call(requestOptions);
  }
}
