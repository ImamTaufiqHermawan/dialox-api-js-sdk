/**
 * Dialox Api ImamLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  TemplateAllRequest,
  templateAllRequestSchema,
} from '../models/templateAllRequest';
import {
  TemplateWithButtonRequest,
  templateWithButtonRequestSchema,
} from '../models/templateWithButtonRequest';
import {
  TemplateWithHeaderRequest,
  templateWithHeaderRequestSchema,
} from '../models/templateWithHeaderRequest';
import {
  TemplateWithTextVariableRequest,
  templateWithTextVariableRequestSchema,
} from '../models/templateWithTextVariableRequest';
import { string } from '../schema';
import { BaseController } from './baseController';

export class ExampleController extends BaseController {
  /**
   * @param workspaceId
   * @param channelId
   * @param body
   * @return Response from the API call
   */
  async templateWithTextVariable(
    workspaceId: string,
    channelId: string,
    body: TemplateWithTextVariableRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      workspaceId: [workspaceId, string()],
      channelId: [channelId, string()],
      body: [body, templateWithTextVariableRequestSchema],
    });
    req.json(mapped.body);
    req.appendTemplatePath`/workspaces/${mapped.workspaceId}/channels/${mapped.channelId}/broadcasts/single`;
    return req.call(requestOptions);
  }

  /**
   * @param workspaceId
   * @param channelId
   * @param body
   * @return Response from the API call
   */
  async templateWithHeader(
    workspaceId: string,
    channelId: string,
    body: TemplateWithHeaderRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      workspaceId: [workspaceId, string()],
      channelId: [channelId, string()],
      body: [body, templateWithHeaderRequestSchema],
    });
    req.json(mapped.body);
    req.appendTemplatePath`/workspaces/${mapped.workspaceId}/channels/${mapped.channelId}/broadcasts/single`;
    return req.call(requestOptions);
  }

  /**
   * @param workspaceId
   * @param channelId
   * @param body
   * @return Response from the API call
   */
  async templateWithButton(
    workspaceId: string,
    channelId: string,
    body: TemplateWithButtonRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      workspaceId: [workspaceId, string()],
      channelId: [channelId, string()],
      body: [body, templateWithButtonRequestSchema],
    });
    req.json(mapped.body);
    req.appendTemplatePath`/workspaces/${mapped.workspaceId}/channels/${mapped.channelId}/broadcasts/single`;
    return req.call(requestOptions);
  }

  /**
   * @param workspaceid
   * @param channelId
   * @param body
   * @return Response from the API call
   */
  async templateAll(
    workspaceid: string,
    channelId: string,
    body: TemplateAllRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      workspaceid: [workspaceid, string()],
      channelId: [channelId, string()],
      body: [body, templateAllRequestSchema],
    });
    req.json(mapped.body);
    req.appendTemplatePath`/workspaces/${mapped.workspaceid}/channels/${mapped.channelId}/broadcasts/bulk`;
    return req.call(requestOptions);
  }
}
