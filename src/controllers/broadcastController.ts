/**
 * Dialox Api ImamLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  BroadcastBulkByFileCsvRequest,
  broadcastBulkByFileCsvRequestSchema,
} from '../models/broadcastBulkByFileCsvRequest';
import {
  BroadcastBulkByGroupRequest,
  broadcastBulkByGroupRequestSchema,
} from '../models/broadcastBulkByGroupRequest';
import { Scheduler, schedulerSchema } from '../models/scheduler';
import {
  SendBroadcastSingleRequest,
  sendBroadcastSingleRequestSchema,
} from '../models/sendBroadcastSingleRequest';
import { number, string } from '../schema';
import { BaseController } from './baseController';

export class BroadcastController extends BaseController {
  /**
   * @param workspaceId
   * @return Response from the API call
   */
  async listBroadcast(
    workspaceId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({ workspaceId: [workspaceId, string()] });
    req.appendTemplatePath`/workspaces/${mapped.workspaceId}/broadcasts`;
    return req.call(requestOptions);
  }

  /**
   * @param workspaceId
   * @param broadcastId
   * @return Response from the API call
   */
  async detailBroadcast(
    workspaceId: string,
    broadcastId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      workspaceId: [workspaceId, string()],
      broadcastId: [broadcastId, string()],
    });
    req.appendTemplatePath`/workspaces/${mapped.workspaceId}/broadcasts/${mapped.broadcastId}`;
    return req.call(requestOptions);
  }

  /**
   * @param page
   * @param status
   * @param workspaceid
   * @param broadcastId
   * @return Response from the API call
   */
  async broadcastLog(
    page: number,
    status: string,
    workspaceid: string,
    broadcastId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      page: [page, number()],
      status: [status, string()],
      workspaceid: [workspaceid, string()],
      broadcastId: [broadcastId, string()],
    });
    req.query('page', mapped.page);
    req.query('status', mapped.status);
    req.appendTemplatePath`/workspaces/${mapped.workspaceid}/broadcasts/${mapped.broadcastId}/log`;
    return req.call(requestOptions);
  }

  /**
   * @param workspaceId
   * @param channelId
   * @param body
   * @return Response from the API call
   */
  async sendBroadcastSingle(
    workspaceId: string,
    channelId: string,
    body: SendBroadcastSingleRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      workspaceId: [workspaceId, string()],
      channelId: [channelId, string()],
      body: [body, sendBroadcastSingleRequestSchema],
    });
    req.json(mapped.body);
    req.appendTemplatePath`/workspaces/${mapped.workspaceId}/channels/${mapped.channelId}/broadcasts/single`;
    return req.call(requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async broadcastBulkByFileCsv(
    body: BroadcastBulkByFileCsvRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Scheduler>> {
    const req = this.createRequest(
      'POST',
      '/workspaces/workspace-1/channels/channel-1/broadcasts/bulk'
    );
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      body: [body, broadcastBulkByFileCsvRequestSchema],
    });
    req.json(mapped.body);
    return req.callAsJson(schedulerSchema, requestOptions);
  }

  /**
   * @param workspaceid
   * @param channelId
   * @param body
   * @return Response from the API call
   */
  async broadcastBulkByGroup(
    workspaceid: string,
    channelId: string,
    body: BroadcastBulkByGroupRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Scheduler>> {
    const req = this.createRequest('POST');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      workspaceid: [workspaceid, string()],
      channelId: [channelId, string()],
      body: [body, broadcastBulkByGroupRequestSchema],
    });
    req.json(mapped.body);
    req.appendTemplatePath`/workspaces/${mapped.workspaceid}/channels/${mapped.channelId}/broadcasts/bulk`;
    return req.callAsJson(schedulerSchema, requestOptions);
  }
}
