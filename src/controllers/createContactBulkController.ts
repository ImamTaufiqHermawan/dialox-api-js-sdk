/**
 * Dialox Api ImamLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  TypeCreateGroupRequest,
  typeCreateGroupRequestSchema,
} from '../models/typeCreateGroupRequest';
import {
  TypeExisitngGroupRequest,
  typeExisitngGroupRequestSchema,
} from '../models/typeExisitngGroupRequest';
import {
  TypeNoneRequest,
  typeNoneRequestSchema,
} from '../models/typeNoneRequest';
import { string } from '../schema';
import { BaseController } from './baseController';

export class CreateContactBulkController extends BaseController {
  /**
   * @param body
   * @return Response from the API call
   */
  async typeNone(
    body: TypeNoneRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'POST',
      '/workspaces/chitchat-6OHiX6r4_/contacts/bulk'
    );
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({ body: [body, typeNoneRequestSchema] });
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param workspaceid
   * @param body
   * @return Response from the API call
   */
  async typeCreateGroup(
    workspaceid: string,
    body: TypeCreateGroupRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      workspaceid: [workspaceid, string()],
      body: [body, typeCreateGroupRequestSchema],
    });
    req.json(mapped.body);
    req.appendTemplatePath`/workspaces/${mapped.workspaceid}/contacts/bulk`;
    return req.call(requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async typeExisitngGroup(
    body: TypeExisitngGroupRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'POST',
      '/workspaces/chitchat-6OHiX6r4_/contacts/bulk'
    );
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      body: [body, typeExisitngGroupRequestSchema],
    });
    req.json(mapped.body);
    return req.call(requestOptions);
  }
}
